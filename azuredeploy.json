{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 2,
      "maxLength": 50,
      "metadata": {
        "description": "Service name prefix must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and is limited between 2 and 50 characters in length."
      }
    },
    "storageSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "This is  Storage Account SKU associated with the service"
      }
    },
    "searchSku": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "free",
        "basic",
        "standard",
        "standard2",
        "standard3"
      ],
      "metadata": {
        "description": "The SKU of the search service you want to create. E.g. free or standard"
      }
    },
    "webAppSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "The SKU of the Web service you want to create."
      }
    },
    "azFunctionAppSku": {
      "type": "string",
      "defaultValue": "Y1",
      "allowedValues": [
        "Y1"
      ],
      "metadata": {
        "description": "The SKU of the Azure Function you want to create."
      }
    },
    "repoURL": {
      "type": "string",
      "defaultValue": "https://github.com/flecoqui/TestSearchService.git",
      "metadata": {
        "description": "The URL for the GitHub repository that contains the project to deploy."
      }
    },
    "repoBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "The branch of the GitHub repository to use."
      }
    },
    "repoFunctionPath": {
      "type": "string",
      "defaultValue": "TestFunctionApp",
      "metadata": {
        "description": "The path of the Azure Function code on github."
      }
    },
    "repoWebAppPath": {
      "type": "string",
      "defaultValue": "TestWebApp",
      "metadata": {
        "description": "The path of the Azure Web App on code on github."
      }
    }
  },
  "variables": {
    "inputFolder": "inputdocs",
    "outputFolder": "outputdocs",
    "location": "[resourceGroup().location]",
    "adlsName": "[concat(parameters('namePrefix'), 'adls')]",
    "databaseName": "[concat(parameters('namePrefix'), 'db')]",
    "searchName": "[concat(parameters('namePrefix'),'search')]",
    "functionPlanName": "[concat(parameters('namePrefix'), 'functionplan')]",
    "webPlanName": "[concat(parameters('namePrefix'), 'webplan')]",
    "azFunctionName": "[concat(parameters('namePrefix'), 'function')]",
    "webAppName": "[concat(parameters('namePrefix'), 'web')]",
    "appInsightName":  "[concat(parameters('namePrefix'), 'insight')]",
    "searchReplicaCount": "1",
    "searchPartitionCount": "1",
    "searchHostingMode": "default",
    "apiVersion": "2015-06-15",
    "storageNamePrefix": "[toLower(substring(concat(parameters('namePrefix'), uniqueString(resourceGroup().id)), 0, 8))]",
    "storageName": "[concat(variables('storageNamePrefix'), uniqueString(concat(resourceGroup().id, variables('storageNamePrefix'))),'sa')]",
    "planSku": {
      "y1": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0,
        "planKind": "linux",
        "functionKind": "functionapp,linux",
        "webKind": "app,linux"
      },
      "d1": {
        "name": "D1",
        "tier": "Shared",
        "size": "D1",
        "family": "D",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      },
      "f1": {
        "name": "F1",
        "tier": "Free",
        "size": "F1",
        "family": "F",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      },
      "b1": {
        "name": "B1",
        "tier": "Basic",
        "size": "B1",
        "family": "B",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      },
      "s1": {
        "name": "S1",
        "tier": "Standard",
        "size": "S1",
        "family": "S",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      },
      "p1": {
        "name": "P1",
        "tier": "Premium",
        "size": "P1",
        "family": "P",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      },
      "p1v2": {
        "name": "P1V2",
        "tier": "PremiumV2",
        "size": "P1V2",
        "family": "PV2",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      },
      "i1": {
        "name": "I1",
        "tier": "Isolated",
        "size": "I1",
        "family": "I",
        "capacity": 1,
        "planKind": "linux",
        "functionKind": "functionapp,linux,container",
        "webKind": "app,linux"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "[parameters('storageSku')]"
      },
      "kind": "Storage",
      "name": "[variables('storageName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "cors": {
          "allowedHeaders": [ "*" ],
          "allowedMethods": [ "get", "post", "put" ],
          "allowedOrigins": [ "*" ],
          "exposedHeaders": [ "*" ],
          "maximumAge": 5
        },
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }

      },
      "resources": [],
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "cors": {
          "allowedHeaders": [ "*" ],
          "allowedMethods": [ "get", "post", "put" ],
          "allowedOrigins": [ "*" ],
          "exposedHeaders": [ "*" ],
          "maximumAge": 5
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default/azure-webjobs-hosts')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default/azure-webjobs-secrets')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default/scm-releases')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.DataLakeStore/accounts",
      "apiVersion": "2016-11-01",
      "name": "[variables('adlsName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "firewallState": "Disabled",
        "firewallAllowAzureIps": "Disabled",
        "firewallRules": [],
        "trustedIdProviderState": "Disabled",
        "trustedIdProviders": [],
        "encryptionState": "Enabled",
        "encryptionConfig": {
          "type": "ServiceManaged"
        },
        "newTier": "Consumption"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-08-01",
      "name": "[variables('databaseName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
      ],
      "tags": {
        "defaultExperience": "Core (SQL)"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "ipRangeFilter": "104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
        ],
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "capabilities": []
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "name": "[variables('searchName')]",
      "apiVersion": "2015-08-19",
      "location": "[resourceGroup().location]",
      "properties": {
        "replicaCount": "[variables('searchReplicaCount')]",
        "partitionCount": "[variables('searchPartitionCount')]",
        "hostingMode": "[variables('searchHostingMode')]"
      },
      "sku": {
        "name": "[toLower(parameters('searchSku'))]"
      }
    },

    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "name": "[variables('planSku')[toLower(parameters('webAppSku'))].name]",
        "capacity": "[variables('planSku')[toLower(parameters('webAppSku'))].capacity]"
      },
      "kind": "[variables('planSku')[toLower(parameters('webAppSku'))].planKind]",
      "name": "[variables('webPlanName')]",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('webPlanName')]",
        "perSiteScaling": false,
        "reserved": true,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.DataLakeStore/accounts', variables('adlsName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName'))]",
        "[resourceId('Microsoft.Search/searchServices', variables('searchName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "kind": "[variables('planSku')[toLower(parameters('webAppSku'))].webKind]",
      "name": "[variables('webAppName')]",
      "apiVersion": "2016-08-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabled": true,
        "name": "[variables('webAppName')]",
        "hostNames": [
          "[concat(variables('webAppName'),'.azurewebsites.net')]"
        ],
        "enabledHostNames": [
          "[concat(variables('webAppName'),'.azurewebsites.net')]",
          "[concat(variables('webAppName'),'.scm.azurewebsites.net')]"
        ],
        "hostNameSslStates": [
          {
            "name": "[concat(variables('webAppName'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('webAppName'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]",
        "reserved": true,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "appSettings": [
            {
              "name": "inputFolder",
              "value": "[variables('inputFolder')]"
            },
            {
              "name": "outputFolder",
              "value": "[variables('outputFolder')]"
            },
            {
              "name": "Project",
              "value": "[parameters('repoWebAppPath')]"
            },
            {
              "name": "WEBSITE_DYNAMIC_CACHE",
              "value": "0"
            },
            {
              "name": "WEBSITE_LOCAL_CACHE_OPTION",
              "value": "Never"
            },
            {
              "name": "Storage:AccountName",
              "value": "[variables('storageName')]"
            },
            {
              "name": "Storage:AccountKey",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')),'2015-05-01-preview').key1]"
            },
            {
              "name": "Search:ServiceName",
              "value": "[variables('searchName')]"
            },
            {
              "name": "Search:Key",
              "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('searchName')), '2015-08-19').PrimaryKey]"
            },
            {
              "name": "Cosmos:ServiceName",
              "value": "[variables('databaseName')]"
            },
            {
              "name": "Cosmos:Key",
              "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName')),'2019-08-01').primaryMasterKey]"
            },
            {
              "name": "DataLake:ServiceName",
              "value": "[variables('adlsName')]"
            },
            {
              "name": "ApplicationInsights:InstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightName')), '2015-05-01').InstrumentationKey]"
            }

          ]
        }
      },
      "resources": [

      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]"
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "name": "[concat(variables('webAppName'), '/web')]",
      "type": "Microsoft.Web/sites/sourcecontrols",
      "location":  "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('webAppName'))]",
        "[concat('Microsoft.Web/Sites/', variables('webAppName'),'/config/web')]"
      ],
      "properties": {
        "RepoUrl": "[parameters('repoURL')]",
        "branch": "[parameters('repoBranch')]",
        "IsManualIntegration": true
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2016-08-01",
      "name": "[concat(variables('webAppName'), '/web')]",
      "location":  "[resourceGroup().location]",
      "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ],
      "properties": {
          "numberOfWorkers": 1,
          "defaultDocuments": [
              "Default.htm",
              "Default.html",
              "Default.asp",
              "index.htm",
              "index.html",
              "iisstart.htm",
              "default.aspx",
              "index.php",
              "hostingstart.html"
          ],
          "netFrameworkVersion": "v4.0",
          "phpVersion": "",
          "pythonVersion": "",
          "nodeVersion": "",
          "linuxFxVersion": "DOTNETCORE|3.0",
          "requestTracingEnabled": false,
          "remoteDebuggingEnabled": false,
          "remoteDebuggingVersion": "VS2017",
          "httpLoggingEnabled": false,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": false,
          "publishingUsername": "$testdotnetcore3wvd",
         
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": true,
          "appCommandLine": "",
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
              {
                  "virtualPath": "/",
                  "physicalPath": "site\\wwwroot",
                  "preloadEnabled": true,
                  "virtualDirectories": null
              }
          ],
          "winAuthAdminState": 0,
          "winAuthTenantState": 0,
          "customAppPoolIdentityAdminState": false,
          "customAppPoolIdentityTenantState": false,
          "loadBalancing": "LeastRequests",
          "routingRules": [],
          "experiments": {
              "rampUpRules": []
          },
          "autoHealEnabled": false,
          "vnetName": "",
          "siteAuthEnabled": false,
          "siteAuthSettings": {
              "enabled": null,
              "unauthenticatedClientAction": null,
              "tokenStoreEnabled": null,
              "allowedExternalRedirectUrls": null,
              "defaultProvider": null,
              "clientId": null,
              "clientSecret": null,
              "clientSecretCertificateThumbprint": null,
              "issuer": null,
              "allowedAudiences": null,
              "additionalLoginParams": null,
              "isAadAutoProvisioned": false,
              "googleClientId": null,
              "googleClientSecret": null,
              "googleOAuthScopes": null,
              "facebookAppId": null,
              "facebookAppSecret": null,
              "facebookOAuthScopes": null,
              "twitterConsumerKey": null,
              "twitterConsumerSecret": null,
              "microsoftAccountClientId": null,
              "microsoftAccountClientSecret": null,
              "microsoftAccountOAuthScopes": null
          },
          "localMySqlEnabled": false,
          "http20Enabled": false,
          "minTlsVersion": "1.2",
          "ftpsState": "AllAllowed",
          "reservedInstanceCount": 0,
          "fileChangeAuditEnabled": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2016-08-01",
      "name": "[variables('azFunctionName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightName'))]"
      ],
      "kind": "[variables('planSku')[toLower(parameters('azFunctionAppSku'))].functionKind]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('azFunctionName'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('azFunctionName'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "reserved": true,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "inputFolder",
              "value": "[variables('inputFolder')]"
            },
            {
              "name": "outputFolder",
              "value": "[variables('outputFolder')]"
            },
            {
              "name": "Project",
              "value": "[parameters('repoFunctionPath')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=', variables('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=', variables('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "Storage:AccountName",
              "value": "[variables('storageName')]"
            },
            {
              "name": "Storage:AccountKey",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')),'2015-05-01-preview').key1]"
            },
            {
              "name": "Search:ServiceName",
              "value": "[variables('searchName')]"
            },
            {
              "name": "Search:Key",
              "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('searchName')), '2015-08-19').PrimaryKey]"
            },
            {
              "name": "Cosmos:ServiceName",
              "value": "[variables('databaseName')]"
            },
            {
              "name": "Cosmos:Key",
              "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName')),'2019-08-01').primaryMasterKey]"
            },
            {
              "name": "DataLake:ServiceName",
              "value": "[variables('adlsName')]"
            },
            {
              "name": "ApplicationInsights:InstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightName')), '2015-05-01').InstrumentationKey]"
            }
          ]
        }
      },
      "resources": [

      ]

    }, 
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2016-08-01",
      "name": "[concat(variables('azFunctionName'), '/web')]",
      "location":  "[resourceGroup().location]",
      "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('azFunctionName'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
            "Default.htm",
            "Default.html",
            "Default.asp",
            "index.htm",
            "index.html",
            "iisstart.htm",
            "default.aspx",
            "index.php"
        ],
        "netFrameworkVersion": "v4.0",
        "phpVersion": "",
        "pythonVersion": "",
        "nodeVersion": "",
        "linuxFxVersion": "",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$testsearchfunc",
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "appCommandLine": "",
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
            {
                "virtualPath": "/",
                "physicalPath": "site\\wwwroot",
                "preloadEnabled": false,
                "virtualDirectories": null
            }
        ],
        "winAuthAdminState": 0,
        "winAuthTenantState": 0,
        "customAppPoolIdentityAdminState": false,
        "customAppPoolIdentityTenantState": false,
        "loadBalancing": "LeastRequests",
        "routingRules": [],
        "experiments": {
            "rampUpRules": []
        },
        "autoHealEnabled": false,
        "vnetName": "",
        "siteAuthEnabled": false,
        "siteAuthSettings": {
            "enabled": null,
            "unauthenticatedClientAction": null,
            "tokenStoreEnabled": null,
            "allowedExternalRedirectUrls": null,
            "defaultProvider": null,
            "clientId": null,
            "clientSecret": null,
            "clientSecretCertificateThumbprint": null,
            "issuer": null,
            "allowedAudiences": null,
            "additionalLoginParams": null,
            "isAadAutoProvisioned": false,
            "googleClientId": null,
            "googleClientSecret": null,
            "googleOAuthScopes": null,
            "facebookAppId": null,
            "facebookAppSecret": null,
            "facebookOAuthScopes": null,
            "twitterConsumerKey": null,
            "twitterConsumerSecret": null,
            "microsoftAccountClientId": null,
            "microsoftAccountClientSecret": null,
            "microsoftAccountOAuthScopes": null
        },
        "cors": {
            "allowedOrigins": [
                "https://functions.azure.com",
                "https://functions-staging.azure.com",
                "https://functions-next.azure.com"
            ],
            "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "http20Enabled": true,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0,
        "fileChangeAuditEnabled": false,
        "functionsRuntimeScaleMonitoringEnabled": false
      }
    },



    {
      "type": "microsoft.insights/components",
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightName')]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('azFunctionName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "AppServiceEnablementCreate"
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2016-08-01",
      "name": "[concat(variables('azFunctionName'), '/', variables('azFunctionName'), '.azurewebsites.net')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('azFunctionName'))]"
      ],
      "properties": {
        "siteName": "[variables('azFunctionName')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2016-08-01",
      "name": "[concat(variables('webAppName'), '/', variables('webAppName'), '.azurewebsites.net')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ],
      "properties": {
        "siteName": "[variables('webAppName')]",
        "hostNameType": "Verified"
      }
    }
  ],
  "outputs": {
    "AzureStorage":{
      "type": "string",
      "value": "[concat('Account Storage Name: ',variables('storageName'),' Key: ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')),'2015-05-01-preview').key1)]"
    },
    "AzureSearch":{
      "type": "string",
      "value": "[concat('Account Search Name: ',variables('searchName'),' Key: ', listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('searchName')), '2015-08-19').PrimaryKey)]"
    },
    "AzureCosmos":{
      "type": "string",
      "value": "[concat('Cosmos Name: ',variables('databaseName'),' Key: ', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName')),'2019-08-01').primaryMasterKey)]"
    },
    "AzureDataLake":{
      "type": "string",
      "value": "[concat('Data Lake Name: ',variables('adlsName'))]"
    },
    "curlCmdAzFunction1": {
      "type": "string",
      "value": "[concat('curl -d \"{\\\"param1\\\":\\\"0123456789\\\",\\\"param2\\\":\\\"abcdef\\\"}\" -H \"Content-Type: application/json\"  -X POST   \"https://',variables('azFunctionName'),'.azurewebsites.net/api/HttpTriggerPythonFunction\"')]"
    },
    "curlCmdAzFunction2": {
      "type": "string",
      "value": "[concat('curl -H \"Content-Type: application/json\"  -X GET   \"https://',variables('azFunctionName'),'.azurewebsites.net/api/HttpTriggerPythonFunction?param1=0123456789&param2=abcdef\"')]"
    },
    "curlCmdAzWeb2": {
      "type": "string",
      "value": "[concat('curl -H \"Content-Type: application/json\"  -X GET   https://',variables('webAppName'),'.azurewebsites.net/')]"
    }
  }
}